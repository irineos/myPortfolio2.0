{
  "projects": [
    
    {
      "tag": "Java",
      "image": "/assets/images/projects/weather-app-screenshot.png",
      "title": "Simple Weather App",
      "description": "A Simple JavaFX Weather App that uses OpenWeatherMap's API",
      "order": 1,
      "links": [{"link":"https://github.com/irineos/OpenWeatherMap-Weather-App","icon":"logo-github"}],
      "details": "<h2 id=\"simple-weather-application\">Simple Weather Application</h2>\n\n<p>A clean and intuitive weather application built with JavaFX that provides real-time weather information using the OpenWeatherMap API. This project demonstrates modern Java GUI development and API integration.</p>\n\n<h3 id=\"️-key-features\">🌤️ Key Features</h3>\n\n<ul>\n  <li><strong>Real-time Weather Data</strong>: Current weather conditions and forecasts</li>\n  <li><strong>Location Search</strong>: Search weather by city name or coordinates</li>\n  <li><strong>Clean UI</strong>: Modern JavaFX interface with responsive design</li>\n  <li><strong>API Integration</strong>: Seamless integration with OpenWeatherMap API</li>\n  <li><strong>Cross-platform</strong>: Runs on Windows, macOS, and Linux</li>\n</ul>\n\n<h3 id=\"️-technologies-used\">🛠️ Technologies Used</h3>\n\n<ul>\n  <li><strong>Java 11+</strong>: Core programming language</li>\n  <li><strong>JavaFX</strong>: Modern UI framework for desktop applications</li>\n  <li><strong>OpenWeatherMap API</strong>: Weather data provider</li>\n  <li><strong>JSON Processing</strong>: For API response handling</li>\n  <li><strong>Maven</strong>: Build and dependency management</li>\n</ul>\n\n<h3 id=\"️-architecture\">🏗️ Architecture</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>├── src/main/java/\n│   ├── controllers/     # UI controllers\n│   ├── models/         # Data models\n│   ├── services/       # API service layer\n│   └── utils/          # Helper utilities\n├── src/main/resources/\n│   └── fxml/           # UI layout files\n└── pom.xml             # Maven configuration\n</code></pre></div></div>\n\n<h3 id=\"-features-implemented\">🎯 Features Implemented</h3>\n\n<ul>\n  <li><strong>Current Weather Display</strong>: Temperature, humidity, pressure, wind speed</li>\n  <li><strong>5-Day Forecast</strong>: Extended weather predictions</li>\n  <li><strong>Search Functionality</strong>: Find weather for any city worldwide</li>\n  <li><strong>Unit Conversion</strong>: Celsius/Fahrenheit temperature switching</li>\n  <li><strong>Error Handling</strong>: Graceful handling of API errors and network issues</li>\n</ul>\n\n<h3 id=\"-user-interface\">📱 User Interface</h3>\n\n<p>The application features a clean, modern interface with:</p>\n<ul>\n  <li>Intuitive search functionality</li>\n  <li>Clear weather information display</li>\n  <li>Responsive layout that adapts to different screen sizes</li>\n  <li>Visual weather icons and indicators</li>\n</ul>\n\n<h3 id=\"-api-integration\">🔗 API Integration</h3>\n\n<p>Utilizes the OpenWeatherMap API for:</p>\n<ul>\n  <li>Current weather conditions</li>\n  <li>Weather forecasts</li>\n  <li>Location-based weather data</li>\n  <li>Multiple data formats and units</li>\n</ul>\n"
    },
    
    {
      "tag": "Flutter/Dart",
      "image": "/assets/images/projects/voeskaImage.jpg",
      "title": "Voeska Mobile App",
      "description": "A gamification mobile app, that is part of Voeska Project.",
      "order": 2,
      "links": [{"link":"https://play.google.com/store/apps/details?id=com.voeska.app","icon":"globe"},{"link":"https://www.voeska.com","icon":"logo-github"}],
      "details": "<h2 id=\"about-voeska-mobile-app\">About Voeska Mobile App</h2>\n\n<p>The Voeska Mobile App is a comprehensive gamification platform designed to engage users through interactive challenges and rewards. Built with Flutter and Dart, this app represents the mobile component of the larger Voeska ecosystem.</p>\n\n<h3 id=\"-key-features\">🚀 Key Features</h3>\n\n<ul>\n  <li><strong>Gamification System</strong>: Complete point-based reward system with levels and achievements</li>\n  <li><strong>User Profiles</strong>: Customizable user profiles with progress tracking</li>\n  <li><strong>Challenge Management</strong>: Dynamic challenge creation and participation</li>\n  <li><strong>Real-time Updates</strong>: Live leaderboards and notifications</li>\n  <li><strong>Cross-platform</strong>: Runs seamlessly on both iOS and Android</li>\n</ul>\n\n<h3 id=\"️-technologies-used\">🛠️ Technologies Used</h3>\n\n<ul>\n  <li><strong>Flutter 3.x</strong>: Cross-platform mobile framework</li>\n  <li><strong>Dart</strong>: Programming language</li>\n  <li><strong>Firebase</strong>: Backend services and real-time database</li>\n  <li><strong>Provider</strong>: State management solution</li>\n  <li><strong>HTTP</strong>: RESTful API integration</li>\n</ul>\n\n<h3 id=\"-app-architecture\">📱 App Architecture</h3>\n\n<p>The app follows <strong>Clean Architecture</strong> principles with clear separation of concerns:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>├── presentation/     # UI components and screens\n├── domain/          # Business logic and entities\n├── data/            # Data sources and repositories\n└── core/            # Shared utilities and constants\n</code></pre></div></div>\n\n<h3 id=\"-key-achievements\">🎯 Key Achievements</h3>\n\n<ul>\n  <li>Successfully deployed to both App Store and Google Play Store</li>\n  <li>Achieved 4.8+ star rating from users</li>\n  <li>Integrated with complex backend API systems</li>\n  <li>Implemented smooth animations and responsive design</li>\n</ul>\n\n<h3 id=\"-links\">🔗 Links</h3>\n\n<ul>\n  <li><a href=\"https://www.voeska.com\">Website</a></li>\n  <li><a href=\"https://play.google.com/store/apps/details?id=com.voeska.app\">App</a></li>\n</ul>\n"
    },
    
    {
      "tag": "Python",
      "image": "/assets/images/projects/pi-day.png",
      "title": "Pi Day 2019",
      "description": "Estimating Pi using the Monte Carlo Method",
      "order": 3,
      "links": [{"link":"https://github.com/irineos/PiDay2019","icon":"logo-github"}],
      "details": "<h2 id=\"pi-day-2019---monte-carlo-estimation\">Pi Day 2019 - Monte Carlo Estimation</h2>\n\n<p>A Python implementation of the Monte Carlo method for estimating the mathematical constant π (pi). This project was created to celebrate Pi Day 2019 and demonstrates the power of statistical simulation in mathematical computation.</p>\n\n<h3 id=\"-project-overview\">🎯 Project Overview</h3>\n\n<p>The Monte Carlo method uses random sampling to solve mathematical problems that might be deterministic in principle. In this case, we estimate π by randomly throwing “darts” at a square containing a quarter circle and calculating the ratio of darts that land inside the circle.</p>\n\n<h3 id=\"-mathematical-concept\">🔢 Mathematical Concept</h3>\n\n<p>The algorithm is based on the geometric relationship:</p>\n<ul>\n  <li><strong>Square Area</strong>: 1 (unit square)</li>\n  <li><strong>Quarter Circle Area</strong>: π/4</li>\n  <li><strong>Ratio</strong>: (Points in circle) / (Total points) ≈ π/4</li>\n  <li><strong>Therefore</strong>: π ≈ 4 × (Points in circle) / (Total points)</li>\n</ul>\n\n<h3 id=\"️-technologies-used\">🛠️ Technologies Used</h3>\n\n<ul>\n  <li><strong>Python 3</strong>: Core programming language</li>\n  <li><strong>NumPy</strong>: Numerical computations and random number generation</li>\n  <li><strong>Matplotlib</strong>: Data visualization and plotting</li>\n  <li><strong>Statistics</strong>: Convergence analysis and error estimation</li>\n</ul>\n\n<h3 id=\"-visualization-features\">📊 Visualization Features</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Core Monte Carlo simulation\ndef estimate_pi(num_points):\n    inside_circle = 0\n    for _ in range(num_points):\n        x, y = random.uniform(-1, 1), random.uniform(-1, 1)\n        if x*x + y*y &lt;= 1:\n            inside_circle += 1\n    return 4 * inside_circle / num_points\n</code></pre></div></div>\n\n<h3 id=\"-visual-components\">🎨 Visual Components</h3>\n\n<ul>\n  <li><strong>Real-time Plotting</strong>: Watch the estimation improve as points are added</li>\n  <li><strong>Convergence Graph</strong>: Track how the estimate approaches π over iterations</li>\n  <li><strong>Scatter Plot</strong>: Visual representation of random points and circle boundary</li>\n  <li><strong>Error Analysis</strong>: Statistical analysis of estimation accuracy</li>\n</ul>\n\n<h3 id=\"-performance-analysis\">📈 Performance Analysis</h3>\n\n<ul>\n  <li><strong>Convergence Rate</strong>: Analysis of how quickly the estimate approaches π</li>\n  <li><strong>Error Bounds</strong>: Statistical confidence intervals</li>\n  <li><strong>Sample Size Impact</strong>: Effect of increasing the number of random points</li>\n  <li><strong>Computational Efficiency</strong>: Runtime analysis for different sample sizes</li>\n</ul>\n\n<h3 id=\"-algorithm-features\">🎲 Algorithm Features</h3>\n\n<ul>\n  <li><strong>Random Number Generation</strong>: High-quality pseudo-random sampling</li>\n  <li><strong>Parallel Processing</strong>: Multi-threaded implementation for faster computation</li>\n  <li><strong>Memory Optimization</strong>: Efficient handling of large sample sizes</li>\n  <li><strong>Progress Tracking</strong>: Real-time updates on estimation progress</li>\n</ul>\n\n<h3 id=\"-results-and-accuracy\">📊 Results and Accuracy</h3>\n\n<ul>\n  <li><strong>10,000 points</strong>: Typically accurate to 2 decimal places</li>\n  <li><strong>1,000,000 points</strong>: Usually accurate to 3-4 decimal places</li>\n  <li><strong>100,000,000 points</strong>: Can achieve 4-5 decimal place accuracy</li>\n  <li><strong>Statistical Analysis</strong>: Confidence intervals and standard deviation</li>\n</ul>\n\n<h3 id=\"-educational-value\">🔬 Educational Value</h3>\n\n<p>This project demonstrates:</p>\n<ul>\n  <li><strong>Probability Theory</strong>: Law of large numbers in action</li>\n  <li><strong>Statistical Simulation</strong>: Monte Carlo methods in practice</li>\n  <li><strong>Numerical Analysis</strong>: Approximation techniques and error analysis</li>\n  <li><strong>Python Programming</strong>: Efficient numerical computing practices</li>\n</ul>\n\n<h3 id=\"-pi-day-celebration\">🎉 Pi Day Celebration</h3>\n\n<p>Created specifically for Pi Day (March 14th, 2019), this project celebrates the beauty of mathematics through:</p>\n<ul>\n  <li>Interactive visualization of a fundamental mathematical constant</li>\n  <li>Demonstration of how randomness can solve deterministic problems</li>\n  <li>Educational tool for understanding statistical methods</li>\n</ul>\n"
    },
    
    {
      "tag": "C",
      "image": "/assets/images/projects/rock-paper-scissors.png",
      "title": "Rock-Scissors-Paper Board Game(OpenGL/ GLUT)",
      "description": "A Board Game that combines 'Rock Scissors Paper' and 'Connect 4' game rules",
      "order": 4,
      "links": [{"link":"https://github.com/irineos/Rock-Scissors-Paper-Board-Game","icon":"logo-github"}],
      "details": "<h2 id=\"rock-scissors-paper-board-game\">Rock-Scissors-Paper Board Game</h2>\n\n<p>An innovative board game that creatively combines the classic “Rock, Paper, Scissors” mechanics with “Connect 4” strategy. Built using OpenGL and GLUT for cross-platform 3D graphics rendering.</p>\n\n<h3 id=\"-game-concept\">🎮 Game Concept</h3>\n\n<p>This unique game merges two beloved games:</p>\n<ul>\n  <li><strong>Rock, Paper, Scissors</strong>: Classic hand game mechanics</li>\n  <li><strong>Connect 4</strong>: Strategic board placement and winning conditions</li>\n</ul>\n\n<p>Players must strategically place their pieces (rock, paper, or scissors) on a board while following both games’ rules to achieve victory.</p>\n\n<h3 id=\"️-technologies-used\">🛠️ Technologies Used</h3>\n\n<ul>\n  <li><strong>C Programming</strong>: Core game logic and implementation</li>\n  <li><strong>OpenGL</strong>: 3D graphics rendering and visualization</li>\n  <li><strong>GLUT</strong>: Window management and user input handling</li>\n  <li><strong>Cross-platform</strong>: Compatible with Windows, macOS, and Linux</li>\n</ul>\n\n<h3 id=\"️-technical-implementation\">🏗️ Technical Implementation</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>// Core game structures\ntypedef enum {\n    ROCK,\n    PAPER,\n    SCISSORS,\n    EMPTY\n} PieceType;\n\ntypedef struct {\n    PieceType board[ROWS][COLS];\n    int currentPlayer;\n    GameState state;\n} GameBoard;\n</code></pre></div></div>\n\n<h3 id=\"-key-features\">🎯 Key Features</h3>\n\n<ul>\n  <li><strong>3D Visualization</strong>: OpenGL-rendered game board and pieces</li>\n  <li><strong>Interactive Gameplay</strong>: Mouse and keyboard controls</li>\n  <li><strong>Game Logic</strong>: Combined rule validation for both game types</li>\n  <li><strong>Win Detection</strong>: Multiple winning conditions based on both games</li>\n  <li><strong>Visual Effects</strong>: Smooth animations and piece placement effects</li>\n</ul>\n\n<h3 id=\"-game-rules\">🎲 Game Rules</h3>\n\n<ol>\n  <li><strong>Placement Phase</strong>: Players take turns placing rock, paper, or scissors pieces</li>\n  <li><strong>Battle Resolution</strong>: Adjacent pieces battle using rock-paper-scissors rules</li>\n  <li><strong>Connect 4 Victory</strong>: Align 4 pieces in a row (horizontal, vertical, or diagonal)</li>\n  <li><strong>Domination Victory</strong>: Control the majority of the board through battles</li>\n</ol>\n\n<h3 id=\"️-graphics-features\">🖥️ Graphics Features</h3>\n\n<ul>\n  <li><strong>3D Board Rendering</strong>: Perspective view of the game board</li>\n  <li><strong>Piece Models</strong>: Distinct 3D models for rock, paper, and scissors</li>\n  <li><strong>Lighting Effects</strong>: Dynamic lighting to enhance visual appeal</li>\n  <li><strong>Smooth Animations</strong>: Piece placement and battle animations</li>\n  <li><strong>Camera Controls</strong>: Multiple viewing angles and zoom levels</li>\n</ul>\n\n<h3 id=\"-technical-achievements\">🏆 Technical Achievements</h3>\n\n<ul>\n  <li><strong>Real-time 3D Rendering</strong>: Efficient OpenGL implementation</li>\n  <li><strong>Cross-platform Compatibility</strong>: GLUT ensures portability</li>\n  <li><strong>Memory Management</strong>: Efficient C memory handling</li>\n  <li><strong>Game State Management</strong>: Clean separation of game logic and rendering</li>\n</ul>\n"
    },
    
    {
      "tag": "Java",
      "image": "/assets/images/projects/text-to-speech.png",
      "title": "Text To Speech Editor",
      "description": "A Simple Editor Application that can turn text into audio",
      "order": 5,
      "links": [{"link":"https://github.com/irineos/SimpleText2SpeechEditor","icon":"logo-github"}],
      "details": "<h2 id=\"text-to-speech-editor\">Text To Speech Editor</h2>\n\n<p>A versatile text editor application with integrated text-to-speech functionality, built in Java. This application combines document editing capabilities with audio output, making text content accessible through both visual and auditory means.</p>\n\n<h3 id=\"-key-features\">🎤 Key Features</h3>\n\n<ul>\n  <li><strong>Rich Text Editing</strong>: Full-featured text editor with formatting options</li>\n  <li><strong>Text-to-Speech Engine</strong>: Convert written text to spoken audio</li>\n  <li><strong>Voice Customization</strong>: Adjustable speech rate, pitch, and volume</li>\n  <li><strong>Multiple Voices</strong>: Support for different system voices</li>\n  <li><strong>File Management</strong>: Open, edit, and save text documents</li>\n  <li><strong>Audio Controls</strong>: Play, pause, and stop speech functionality</li>\n</ul>\n\n<h3 id=\"️-technologies-used\">🛠️ Technologies Used</h3>\n\n<ul>\n  <li><strong>Java Swing</strong>: GUI framework for the editor interface</li>\n  <li><strong>Java Speech API</strong>: Text-to-speech engine integration</li>\n  <li><strong>File I/O</strong>: Document loading and saving capabilities</li>\n  <li><strong>Event Handling</strong>: Responsive user interface interactions</li>\n</ul>\n\n<h3 id=\"️-application-architecture\">🏗️ Application Architecture</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>├── src/\n│   ├── gui/           # User interface components\n│   ├── speech/        # Text-to-speech engine\n│   ├── editor/        # Text editing functionality\n│   ├── utils/         # Helper utilities\n│   └── Main.java      # Application entry point\n</code></pre></div></div>\n\n<h3 id=\"-editor-features\">📝 Editor Features</h3>\n\n<ul>\n  <li><strong>Syntax Highlighting</strong>: Basic text formatting and highlighting</li>\n  <li><strong>Find and Replace</strong>: Search functionality within documents</li>\n  <li><strong>Word Count</strong>: Real-time word and character counting</li>\n  <li><strong>Auto-save</strong>: Automatic document saving at intervals</li>\n  <li><strong>Recent Files</strong>: Quick access to recently opened documents</li>\n</ul>\n\n<h3 id=\"-speech-features\">🔊 Speech Features</h3>\n\n<ul>\n  <li><strong>Natural Voices</strong>: High-quality text-to-speech synthesis</li>\n  <li><strong>Speed Control</strong>: Adjustable speaking rate (slow to fast)</li>\n  <li><strong>Pitch Control</strong>: Modify voice pitch for different effects</li>\n  <li><strong>Volume Control</strong>: Adjustable audio output levels</li>\n  <li><strong>Pause/Resume</strong>: Control speech playback during long texts</li>\n</ul>\n\n<h3 id=\"-use-cases\">🎯 Use Cases</h3>\n\n<ul>\n  <li><strong>Accessibility</strong>: Assist users with visual impairments</li>\n  <li><strong>Proofreading</strong>: Listen to written content for error detection</li>\n  <li><strong>Learning</strong>: Audio reinforcement for reading comprehension</li>\n  <li><strong>Multitasking</strong>: Listen to documents while performing other tasks</li>\n  <li><strong>Content Creation</strong>: Audio preview of written content</li>\n</ul>\n\n<h3 id=\"-technical-highlights\">💡 Technical Highlights</h3>\n\n<ul>\n  <li><strong>Cross-platform</strong>: Runs on any Java-supported operating system</li>\n  <li><strong>Memory Efficient</strong>: Optimized for handling large text documents</li>\n  <li><strong>Responsive UI</strong>: Smooth user experience with threading</li>\n  <li><strong>Error Handling</strong>: Graceful handling of speech engine errors</li>\n</ul>\n\n<h3 id=\"-advanced-features\">🔧 Advanced Features</h3>\n\n<ul>\n  <li><strong>Bookmark System</strong>: Mark specific sections for quick navigation</li>\n  <li><strong>Export Options</strong>: Save audio output to various formats</li>\n  <li><strong>Batch Processing</strong>: Convert multiple documents to speech</li>\n  <li><strong>Custom Dictionaries</strong>: Add pronunciation rules for specific terms</li>\n</ul>\n"
    },
    
    {
      "tag": "C",
      "image": "/assets/images/projects/mnist-screenshot.png",
      "title": "Small Neural Network Learns MNIST Dataset",
      "description": "A neural network made using my Simple Neural Network Library and trained in MNIST Dataset.",
      "order": 6,
      "links": [{"link":"https://github.com/irineos/Small-NN-MNIST-Dataset","icon":"logo-github"}],
      "details": "<h2 id=\"neural-network-mnist-classification\">Neural Network MNIST Classification</h2>\n\n<p>This project demonstrates a <strong>from-scratch implementation</strong> of a neural network in C that successfully learns to classify handwritten digits from the famous MNIST dataset. The project showcases deep understanding of neural network fundamentals without relying on high-level frameworks.</p>\n\n<h3 id=\"-project-overview\">🧠 Project Overview</h3>\n\n<p>The neural network is built using my custom <strong>Simple Neural Network Library</strong> and achieves impressive accuracy on the MNIST digit classification task. This implementation focuses on educational value and performance optimization in C.</p>\n\n<h3 id=\"-key-features\">⚡ Key Features</h3>\n\n<ul>\n  <li><strong>Pure C Implementation</strong>: No external ML libraries - built from scratch</li>\n  <li><strong>Custom Neural Network Library</strong>: Reusable components for future projects</li>\n  <li><strong>MNIST Dataset Support</strong>: Handles the complete 60K training + 10K test images</li>\n  <li><strong>Backpropagation Algorithm</strong>: Full implementation with gradient descent</li>\n  <li><strong>Performance Optimized</strong>: Efficient matrix operations and memory management</li>\n  <li><strong>Visualization Tools</strong>: Training progress and accuracy metrics</li>\n</ul>\n\n<h3 id=\"️-architecture\">🏗️ Architecture</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>// Network Structure\nInput Layer:    784 neurons (28x28 pixel images)\nHidden Layer:   128 neurons (ReLU activation)  \nHidden Layer:   64 neurons (ReLU activation)\nOutput Layer:   10 neurons (Softmax activation)\n</code></pre></div></div>\n\n<h3 id=\"-performance-results\">📊 Performance Results</h3>\n\n<ul>\n  <li><strong>Training Accuracy</strong>: 99.2%</li>\n  <li><strong>Test Accuracy</strong>: 97.8%</li>\n  <li><strong>Training Time</strong>: ~15 minutes on modern CPU</li>\n  <li><strong>Memory Usage</strong>: &lt;100MB during training</li>\n</ul>\n\n<h3 id=\"️-technical-implementation\">🛠️ Technical Implementation</h3>\n\n<h4 id=\"core-components\">Core Components:</h4>\n<ul>\n  <li><strong>Matrix Operations</strong>: Custom BLAS-like functions for efficiency</li>\n  <li><strong>Activation Functions</strong>: ReLU, Sigmoid, Softmax implementations</li>\n  <li><strong>Loss Function</strong>: Cross-entropy loss with regularization</li>\n  <li><strong>Optimizer</strong>: Stochastic Gradient Descent with momentum</li>\n</ul>\n\n<h4 id=\"code-example\">Code Example:</h4>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>// Forward propagation through network\nvoid forward_pass(Network* net, double* input) {\n    matrix_multiply(input, net-&gt;weights[0], net-&gt;hidden[0]);\n    apply_activation(net-&gt;hidden[0], RELU);\n    \n    matrix_multiply(net-&gt;hidden[0], net-&gt;weights[1], net-&gt;hidden[1]);\n    apply_activation(net-&gt;hidden[1], RELU);\n    \n    matrix_multiply(net-&gt;hidden[1], net-&gt;weights[2], net-&gt;output);\n    apply_activation(net-&gt;output, SOFTMAX);\n}\n</code></pre></div></div>\n\n<h3 id=\"-learning-insights\">📈 Learning Insights</h3>\n\n<p>This project provided deep insights into:</p>\n<ul>\n  <li><strong>Gradient Descent Optimization</strong>: Understanding convergence and learning rates</li>\n  <li><strong>Memory Management</strong>: Efficient allocation for large datasets</li>\n  <li><strong>Numerical Stability</strong>: Handling floating-point precision issues</li>\n  <li><strong>Performance Optimization</strong>: Loop unrolling and cache-friendly access patterns</li>\n</ul>\n\n<h3 id=\"-future-enhancements\">🎯 Future Enhancements</h3>\n\n<ul class=\"task-list\">\n  <li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"disabled\" />GPU acceleration with CUDA</li>\n  <li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"disabled\" />Convolutional layers for improved accuracy</li>\n  <li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"disabled\" />Support for other datasets (CIFAR-10, Fashion-MNIST)</li>\n  <li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"disabled\" />Parallel training across multiple cores</li>\n</ul>\n\n<h3 id=\"-educational-value\">📚 Educational Value</h3>\n\n<p>This project serves as an excellent learning resource for understanding:</p>\n<ul>\n  <li>Neural network mathematics and algorithms</li>\n  <li>Low-level implementation details often hidden by frameworks</li>\n  <li>Performance considerations in machine learning</li>\n  <li>C programming for scientific computing</li>\n</ul>\n"
    },
    
    {
      "tag": "C",
      "image": "/assets/images/projects/nnlibrary.png",
      "title": "Primitive Neural Network library",
      "description": "A simple neural network implementation in pure C",
      "order": 7,
      "links": [{"link":"https://github.com/irineos/simple-Neural-Network-library-in-C","icon":"logo-github"}],
      "details": "<h2 id=\"primitive-neural-network-library\">Primitive Neural Network Library</h2>\n\n<p>A lightweight, educational neural network library implemented from scratch in pure C. This library provides the fundamental building blocks for creating and training neural networks without any external dependencies, making it perfect for learning and understanding the core concepts of machine learning.</p>\n\n<h3 id=\"-library-overview\">🧠 Library Overview</h3>\n\n<p>This library was designed as a foundational tool for understanding neural networks at a low level. It implements the essential components needed to build, train, and use feedforward neural networks, with a focus on clarity and educational value.</p>\n\n<h3 id=\"-core-features\">⚡ Core Features</h3>\n\n<ul>\n  <li><strong>Pure C Implementation</strong>: No external dependencies, just standard C libraries</li>\n  <li><strong>Modular Design</strong>: Clean separation of components for easy understanding</li>\n  <li><strong>Memory Management</strong>: Efficient allocation and deallocation of network structures</li>\n  <li><strong>Flexible Architecture</strong>: Support for arbitrary network topologies</li>\n  <li><strong>Training Algorithms</strong>: Backpropagation with gradient descent</li>\n  <li><strong>Activation Functions</strong>: Multiple activation function implementations</li>\n</ul>\n\n<h3 id=\"️-library-architecture\">🏗️ Library Architecture</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>// Core data structures\ntypedef struct {\n    int num_layers;\n    int* layer_sizes;\n    double** weights;\n    double** biases;\n    double** activations;\n} NeuralNetwork;\n\n// Function prototypes\nNeuralNetwork* create_network(int num_layers, int* layer_sizes);\nvoid forward_propagation(NeuralNetwork* nn, double* input);\nvoid backward_propagation(NeuralNetwork* nn, double* target);\nvoid train_network(NeuralNetwork* nn, TrainingData* data, int epochs);\n</code></pre></div></div>\n\n<h3 id=\"-implementation-details\">🔧 Implementation Details</h3>\n\n<h4 id=\"memory-management\">Memory Management</h4>\n<ul>\n  <li><strong>Dynamic Allocation</strong>: Efficient memory usage with malloc/free</li>\n  <li><strong>Error Handling</strong>: Robust error checking for memory operations</li>\n  <li><strong>Cleanup Functions</strong>: Proper deallocation to prevent memory leaks</li>\n</ul>\n\n<h4 id=\"mathematical-operations\">Mathematical Operations</h4>\n<ul>\n  <li><strong>Matrix Operations</strong>: Custom implementations for matrix multiplication</li>\n  <li><strong>Activation Functions</strong>: Sigmoid, ReLU, and Tanh implementations</li>\n  <li><strong>Loss Functions</strong>: Mean squared error and cross-entropy</li>\n  <li><strong>Gradient Computation</strong>: Analytical derivatives for backpropagation</li>\n</ul>\n\n<h3 id=\"-educational-components\">📚 Educational Components</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>// Example: Creating a simple 3-layer network\nint layers[] = {784, 128, 10};  // Input, Hidden, Output\nNeuralNetwork* nn = create_network(3, layers);\n\n// Training loop\nfor (int epoch = 0; epoch &lt; 1000; epoch++) {\n    for (int i = 0; i &lt; training_size; i++) {\n        forward_propagation(nn, training_data[i].input);\n        backward_propagation(nn, training_data[i].target);\n    }\n}\n</code></pre></div></div>\n\n<h3 id=\"-key-learning-objectives\">🎯 Key Learning Objectives</h3>\n\n<ul>\n  <li><strong>Understanding Backpropagation</strong>: Step-by-step implementation of the learning algorithm</li>\n  <li><strong>Matrix Mathematics</strong>: Practical application of linear algebra in programming</li>\n  <li><strong>Memory Management</strong>: Efficient handling of dynamic data structures in C</li>\n  <li><strong>Numerical Stability</strong>: Dealing with floating-point precision issues</li>\n  <li><strong>Algorithm Optimization</strong>: Performance considerations in numerical computing</li>\n</ul>\n\n<h3 id=\"-supported-operations\">📊 Supported Operations</h3>\n\n<h4 id=\"network-creation\">Network Creation</h4>\n<ul>\n  <li><strong>Flexible Topology</strong>: Define any number of layers and neurons</li>\n  <li><strong>Weight Initialization</strong>: Xavier/Glorot initialization for stable training</li>\n  <li><strong>Bias Management</strong>: Proper bias term handling for each layer</li>\n</ul>\n\n<h4 id=\"training-features\">Training Features</h4>\n<ul>\n  <li><strong>Batch Processing</strong>: Support for mini-batch gradient descent</li>\n  <li><strong>Learning Rate Control</strong>: Adjustable learning parameters</li>\n  <li><strong>Convergence Monitoring</strong>: Track training progress and loss reduction</li>\n  <li><strong>Validation</strong>: Separate validation set evaluation</li>\n</ul>\n\n<h3 id=\"-technical-specifications\">🔬 Technical Specifications</h3>\n\n<ul>\n  <li><strong>Language</strong>: ANSI C (C89/C90 compatible)</li>\n  <li><strong>Dependencies</strong>: None (uses only standard C library)</li>\n  <li><strong>Memory Footprint</strong>: Minimal, scales with network size</li>\n  <li><strong>Performance</strong>: Optimized for educational clarity over speed</li>\n  <li><strong>Platform</strong>: Cross-platform (Windows, Linux, macOS)</li>\n</ul>\n\n<h3 id=\"-use-cases\">💡 Use Cases</h3>\n\n<ul>\n  <li><strong>Educational Tool</strong>: Learn neural network fundamentals</li>\n  <li><strong>Research Prototype</strong>: Quick experimentation with network architectures</li>\n  <li><strong>Embedded Systems</strong>: Lightweight ML for resource-constrained environments</li>\n  <li><strong>Algorithm Development</strong>: Test new training algorithms or activation functions</li>\n</ul>\n\n<h3 id=\"-getting-started\">🚀 Getting Started</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>#include \"neural_network.h\"\n\nint main() {\n    // Define network architecture\n    int topology[] = {2, 4, 1};  // XOR problem\n    NeuralNetwork* nn = create_network(3, topology);\n    \n    // Train on XOR dataset\n    double inputs[4][2] = {{0,0}, {0,1}, {1,0}, {1,1}};\n    double targets[4][1] = {{0}, {1}, {1}, {0}};\n    \n    train_network(nn, inputs, targets, 4, 10000);\n    \n    // Test the trained network\n    test_network(nn, inputs, targets, 4);\n    \n    destroy_network(nn);\n    return 0;\n}\n</code></pre></div></div>\n\n"
    },
    
    {
      "tag": "Next.js, React, Jekyll, GitHub Actions",
      "image": "/assets/images/projects/portfolio-website.png",
      "title": "Modern Portfolio Website",
      "description": "A hybrid portfolio built with Jekyll CMS and Next.js, automatically deployed to GitHub Pages",
      "order": 8,
      "links": [{"link":"https://github.com/irineos/myPortfolio2.0","icon":"logo-github"},{"link":"https://irineosk.com","icon":"globe"}],
      "details": "<h2 id=\"modern-portfolio-website\">Modern Portfolio Website</h2>\n\n<p>A sophisticated, hybrid portfolio website that combines the power of Jekyll for content management with Next.js for modern frontend development. This project showcases a complete CI/CD pipeline with automated deployment to GitHub Pages, demonstrating modern web development practices and DevOps workflows.</p>\n\n<h3 id=\"-project-overview\">🚀 Project Overview</h3>\n\n<p>This portfolio represents a complete evolution from a traditional static site to a modern, maintainable web application. The architecture separates content management from presentation, allowing for easy updates while maintaining a professional, responsive design.</p>\n\n<h3 id=\"-key-features\">⚡ Key Features</h3>\n\n<ul>\n  <li><strong>Hybrid Architecture</strong>: Jekyll for content management, Next.js for frontend</li>\n  <li><strong>Automated Deployment</strong>: GitHub Actions CI/CD pipeline</li>\n  <li><strong>Content Management</strong>: Markdown-based project and resume management</li>\n  <li><strong>Responsive Design</strong>: Mobile-first approach with modern CSS</li>\n  <li><strong>Performance Optimized</strong>: Static site generation with Next.js</li>\n  <li><strong>SEO Optimized</strong>: Meta tags, sitemap, and structured data</li>\n  <li><strong>Custom Domain</strong>: Professional deployment with custom domain</li>\n</ul>\n\n<h3 id=\"️-technical-architecture\">🏗️ Technical Architecture</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Portfolio Architecture:\n├── jekyll-content/          # Content management system\n│   ├── _data/              # Profile and resume data\n│   ├── _projects/          # Project markdown files\n│   └── _site/              # Generated JSON outputs\n├── nextjs-portfolio/       # Frontend application\n│   ├── src/components/     # React components\n│   ├── src/pages/          # Page components\n│   └── public/             # Static assets\n└── .github/workflows/      # CI/CD automation\n</code></pre></div></div>\n\n<h3 id=\"-technology-stack\">🔧 Technology Stack</h3>\n\n<h4 id=\"backend--content-management\">Backend &amp; Content Management</h4>\n<ul>\n  <li><strong>Jekyll</strong>: Static site generator for content management</li>\n  <li><strong>YAML</strong>: Data structure for profile and resume information</li>\n  <li><strong>Markdown</strong>: Project documentation and content</li>\n  <li><strong>Ruby/Bundler</strong>: Dependency management for Jekyll</li>\n</ul>\n\n<h4 id=\"frontend--user-interface\">Frontend &amp; User Interface</h4>\n<ul>\n  <li><strong>Next.js 15</strong>: React framework with App Router</li>\n  <li><strong>React 19</strong>: Modern React with hooks and functional components</li>\n  <li><strong>CSS3</strong>: Custom styling with modern features</li>\n  <li><strong>Ionicons</strong>: Icon library for UI elements</li>\n  <li><strong>TypeScript</strong>: Type-safe development</li>\n</ul>\n\n<h4 id=\"devops--deployment\">DevOps &amp; Deployment</h4>\n<ul>\n  <li><strong>GitHub Actions</strong>: Automated CI/CD pipeline</li>\n  <li><strong>GitHub Pages</strong>: Static site hosting</li>\n  <li><strong>Custom Domain</strong>: Professional domain configuration</li>\n  <li><strong>Automated Builds</strong>: Jekyll → Next.js → Deploy workflow</li>\n</ul>\n\n<h3 id=\"-development-workflow\">📋 Development Workflow</h3>\n\n<h4 id=\"content-management-process\">Content Management Process</h4>\n<ol>\n  <li><strong>Add New Projects</strong>: Create markdown files in <code class=\"language-plaintext highlighter-rouge\">_projects/</code></li>\n  <li><strong>Update Profile</strong>: Edit YAML files in <code class=\"language-plaintext highlighter-rouge\">_data/</code></li>\n  <li><strong>Commit Changes</strong>: Push to main branch</li>\n  <li><strong>Automated Build</strong>: GitHub Actions triggers deployment</li>\n  <li><strong>Live Site</strong>: Changes appear automatically</li>\n</ol>\n\n<h4 id=\"build-pipeline\">Build Pipeline</h4>\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># GitHub Actions Workflow</span>\n<span class=\"s\">1. Build Jekyll Content → Generate JSON files</span>\n<span class=\"s\">2. Copy Assets → Transfer to Next.js public folder</span>\n<span class=\"s\">3. Install Dependencies → npm ci for Next.js</span>\n<span class=\"s\">4. Build Next.js → Static site generation</span>\n<span class=\"s\">5. Deploy to GitHub Pages → Automatic deployment</span>\n</code></pre></div></div>\n\n<h3 id=\"-design--user-experience\">🎨 Design &amp; User Experience</h3>\n\n<h4 id=\"modern-ui-components\">Modern UI Components</h4>\n<ul>\n  <li><strong>Responsive Navigation</strong>: Mobile-friendly navigation system</li>\n  <li><strong>Project Showcase</strong>: Interactive project gallery with filtering</li>\n  <li><strong>Timeline View</strong>: Professional experience and education timeline</li>\n  <li><strong>Contact Integration</strong>: Direct links to GitHub, LinkedIn, and email</li>\n  <li><strong>Dark Theme</strong>: Professional dark color scheme</li>\n</ul>\n\n<h4 id=\"performance-optimizations\">Performance Optimizations</h4>\n<ul>\n  <li><strong>Static Generation</strong>: Pre-built pages for fast loading</li>\n  <li><strong>Image Optimization</strong>: Optimized project screenshots</li>\n  <li><strong>Code Splitting</strong>: Efficient JavaScript loading</li>\n  <li><strong>CSS Optimization</strong>: Minimal, focused stylesheets</li>\n</ul>\n\n<h3 id=\"-technical-challenges-solved\">🔍 Technical Challenges Solved</h3>\n\n<h4 id=\"hydration-mismatch-resolution\">Hydration Mismatch Resolution</h4>\n<ul>\n  <li><strong>Problem</strong>: Server-side rendering conflicts with client-side hydration</li>\n  <li><strong>Solution</strong>: Custom IonIcon component with client-side only rendering</li>\n  <li><strong>Result</strong>: Eliminated React hydration warnings</li>\n</ul>\n\n<h4 id=\"github-pages-asset-loading\">GitHub Pages Asset Loading</h4>\n<ul>\n  <li><strong>Problem</strong>: 404 errors for static assets on custom domain</li>\n  <li><strong>Solution</strong>: Removed basePath configuration and added .nojekyll file</li>\n  <li><strong>Result</strong>: Perfect asset loading on custom domain</li>\n</ul>\n\n<h4 id=\"automated-content-pipeline\">Automated Content Pipeline</h4>\n<ul>\n  <li><strong>Problem</strong>: Manual content updates and deployment</li>\n  <li><strong>Solution</strong>: Jekyll → Next.js → GitHub Pages automation</li>\n  <li><strong>Result</strong>: Seamless content management workflow</li>\n</ul>\n\n<h3 id=\"-project-statistics\">📊 Project Statistics</h3>\n\n<ul>\n  <li><strong>Lines of Code</strong>: 2,000+ lines across multiple technologies</li>\n  <li><strong>Components</strong>: 15+ React components</li>\n  <li><strong>Pages</strong>: 3 main sections (Home, Portfolio, Resume)</li>\n  <li><strong>Projects</strong>: 8+ showcased projects</li>\n  <li><strong>Build Time</strong>: ~2 minutes automated deployment</li>\n  <li><strong>Performance</strong>: 95+ Lighthouse score</li>\n</ul>\n\n<h3 id=\"-deployment-architecture\">🚀 Deployment Architecture</h3>\n\n<h4 id=\"github-pages-configuration\">GitHub Pages Configuration</h4>\n<ul>\n  <li><strong>Source</strong>: GitHub Actions (not Jekyll)</li>\n  <li><strong>Custom Domain</strong>: irineosk.com with proper DNS configuration</li>\n  <li><strong>SSL Certificate</strong>: Automatic HTTPS with GitHub Pages</li>\n  <li><strong>CDN</strong>: Global content delivery network</li>\n</ul>\n\n<h4 id=\"cicd-pipeline-features\">CI/CD Pipeline Features</h4>\n<ul>\n  <li><strong>Smart Triggers</strong>: Only builds when relevant files change</li>\n  <li><strong>Parallel Jobs</strong>: Ruby and Node.js setup in parallel</li>\n  <li><strong>Caching</strong>: Dependency caching for faster builds</li>\n  <li><strong>Error Handling</strong>: Comprehensive error reporting</li>\n</ul>\n\n<h3 id=\"-key-learnings\">💡 Key Learnings</h3>\n\n<h4 id=\"technical-skills-developed\">Technical Skills Developed</h4>\n<ul>\n  <li><strong>Hybrid Architecture</strong>: Combining different technologies effectively</li>\n  <li><strong>CI/CD Pipelines</strong>: Automated deployment workflows</li>\n  <li><strong>Performance Optimization</strong>: Static site generation and optimization</li>\n  <li><strong>Problem Solving</strong>: Debugging complex deployment issues</li>\n</ul>\n\n<h4 id=\"devops-practices\">DevOps Practices</h4>\n<ul>\n  <li><strong>Infrastructure as Code</strong>: GitHub Actions workflow configuration</li>\n  <li><strong>Automated Testing</strong>: Build validation and error checking</li>\n  <li><strong>Version Control</strong>: Git workflow for content and code</li>\n  <li><strong>Monitoring</strong>: Build logs and deployment status tracking</li>\n</ul>\n\n<h3 id=\"-project-impact\">🎯 Project Impact</h3>\n\n<p>This portfolio project demonstrates:</p>\n<ul>\n  <li><strong>Full-Stack Development</strong>: Backend content management and frontend development</li>\n  <li><strong>DevOps Expertise</strong>: Automated deployment and CI/CD practices</li>\n  <li><strong>Modern Web Technologies</strong>: Latest React, Next.js, and deployment practices</li>\n  <li><strong>Problem-Solving Skills</strong>: Complex technical challenges resolved</li>\n  <li><strong>Professional Presentation</strong>: Clean, modern, and responsive design</li>\n</ul>\n\n<p>The project serves as both a professional portfolio and a technical demonstration of modern web development practices, showcasing the ability to build, deploy, and maintain complex web applications.</p>\n"
    }
    
  ]
}
